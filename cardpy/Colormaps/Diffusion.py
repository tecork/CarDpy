def cDTI_Colormaps_Generator():
    """
    ########## Definition Inputs ##################################################################################################################
    # None
    ########## Definition Outputs #################################################################################################################
    # cDTI_cmaps :  Directory containing standardized colormaps for cardiac diffusion tensor imaging (cDTI) and cardiac diffusion weighted imaging
                    (cDWI).
                    cDTI colormaps include the following ...
                        - Mean Diffusivity (MD)
                        - Fractional Anisotropy (FA)
                        - Mode (MO)
                        - Helix Angle (HA)
                        - Secondary Eigenvector Angle (E2A)
                        - Absolute Secondary Eigenvector Angle(absE2A)
                        - Transverse Angle (TA)
                    cDWI colormaps include the following ...
                        - Apperant Diffusion Coefficent (ADC)
    """
    ########## Definition Information #############################################################################################################
    ### Colormaps originally generated by Pedro F. Ferreira in MATLAB (https://github.com/Pedro-Filipe/cardiac_DTI_colormaps)
    ### Converted to Python by Tyler E. Cork, tyler.e.cork@gmail.com
    ### Cardiac Magnetic Resonance (CMR) Group, Leland Stanford Jr University, 2022
    ########## Import Modules ######################################################################################################################
    import os
    import numpy      as np
    import matplotlib as mpl
    from   scipy      import interpolate
    ########## Define Path to Colormap Text Files ##################################################################################################
    Colormaps_Path = __file__
    Colormaps_Path = Colormaps_Path.split('Diffusion.py')[0]
    ########## Generate Helix Angle Colormap #######################################################################################################
    Helix_Angle_Path          = os.path.join(Colormaps_Path, 'Helix_Angle.txt')
    f                         = open(Helix_Angle_Path, 'r')
    Helix_Angle_Colormap_Data = np.genfromtxt(f, delimiter = '\t')
    cmap_HA                   = mpl.colors.ListedColormap(Helix_Angle_Colormap_Data)
    ########## Generate E2 Angle Colormap ##########################################################################################################
    E2_Angle_Path          = os.path.join(Colormaps_Path, 'E2_Angle.txt')
    f                      = open(E2_Angle_Path, 'r')
    E2_Angle_Colormap_Data = np.genfromtxt(f, delimiter = '\t')
    cmap_E2A               = mpl.colors.ListedColormap(E2_Angle_Colormap_Data)
    ########## Generate Absolute E2 Angle Colormap #################################################################################################
    Absolute_E2_Angle_Path          = os.path.join(Colormaps_Path, 'Absolute_E2_Angle.txt')
    f                               = open(Absolute_E2_Angle_Path, 'r')
    Absolute_E2_Angle_Colormap_Data = np.genfromtxt(f, delimiter = '\t')
    cmap_absE2A                     = mpl.colors.ListedColormap(Absolute_E2_Angle_Colormap_Data)
    ########## Generate Transverse Angle Colormap ##################################################################################################
    Transverse_Angle_Path          = os.path.join(Colormaps_Path, 'Transverse_Angle.txt')
    f                              = open(Transverse_Angle_Path, 'r')
    Transverse_Angle_Colormap_Data = np.genfromtxt(f, delimiter = '\t')
    cmap_TA                        = mpl.colors.ListedColormap(Transverse_Angle_Colormap_Data)
    ########## Generate Mean Diffusivity/Apperant Diffusion Coefficent Colormaps ###################################################################
    Mean_Diffusivity_Path                       = os.path.join(Colormaps_Path, 'Mean_Diffusivity.txt')
    f                                           = open(Mean_Diffusivity_Path, 'r')
    Mean_Diffusivity_Colormap_Data              = np.genfromtxt(f, delimiter = '\t')
    f_x                                         = interpolate.interp1d(np.arange(0, 64), Mean_Diffusivity_Colormap_Data[:, 0])
    f_y                                         = interpolate.interp1d(np.arange(0, 64), Mean_Diffusivity_Colormap_Data[:, 1])
    f_z                                         = interpolate.interp1d(np.arange(0, 64), Mean_Diffusivity_Colormap_Data[:, 2])
    x                                           = np.linspace(0, 63, 256)
    y                                           = np.linspace(0, 63, 256)
    z                                           = np.linspace(0, 63, 256)
    x_new                                       = f_x(x)
    y_new                                       = f_y(y)
    z_new                                       = f_z(z)
    Mean_Diffusivity_Colormap_Data_interpolated = np.array([x_new, y_new, z_new]).T
    cmap_MD                                     = mpl.colors.ListedColormap(Mean_Diffusivity_Colormap_Data_interpolated)
    cmap_ADC                                    = mpl.colors.ListedColormap(Mean_Diffusivity_Colormap_Data_interpolated)
    ########## Generate Fractional Anisotropy Colormap #############################################################################################
    Fractional_Anisotropy_Path                       = os.path.join(Colormaps_Path, 'Fractional_Anisotropy.txt')
    f                                                = open(Fractional_Anisotropy_Path, 'r')
    Fractional_Anisotropy_Colormap_Data              = np.genfromtxt(f, delimiter = '\t')
    f_x                                              = interpolate.interp1d(np.arange(0, 64), Fractional_Anisotropy_Colormap_Data[:, 0])
    f_y                                              = interpolate.interp1d(np.arange(0, 64), Fractional_Anisotropy_Colormap_Data[:, 1])
    f_z                                              = interpolate.interp1d(np.arange(0, 64), Fractional_Anisotropy_Colormap_Data[:, 2])
    x                                                = np.linspace(0, 63, 256)
    y                                                = np.linspace(0, 63, 256)
    z                                                = np.linspace(0, 63, 256)
    x_new                                            = f_x(x)
    y_new                                            = f_y(y)
    z_new                                            = f_z(z)
    Fractional_Anisotropy_Colormap_Data_interpolated = np.array([x_new, y_new, z_new]).T
    cmap_FA                                          = mpl.colors.ListedColormap(Fractional_Anisotropy_Colormap_Data_interpolated)
    ########## Generate Mode Colormap ##############################################################################################################
    Mode_Path                       = os.path.join(Colormaps_Path, 'Mode.txt')
    f                               = open(Mode_Path, 'r')
    Mode_Colormap_Data              = np.genfromtxt(f, delimiter = '\t')
    f_x                             = interpolate.interp1d(np.arange(0, 64), Mode_Colormap_Data[:, 0])
    f_y                             = interpolate.interp1d(np.arange(0, 64), Mode_Colormap_Data[:, 1])
    f_z                             = interpolate.interp1d(np.arange(0, 64), Mode_Colormap_Data[:, 2])
    x                               = np.linspace(0, 63, 256)
    y                               = np.linspace(0, 63, 256)
    z                               = np.linspace(0, 63, 256)
    x_new                           = f_x(x)
    y_new                           = f_y(y)
    z_new                           = f_z(z)
    Mode_Colormap_Data_interpolated = np.array([x_new, y_new, z_new]).T
    cmap_MO                         = mpl.colors.ListedColormap(Mode_Colormap_Data_interpolated)
    ########## Store Colormaps in Dictionary #######################################################################################################
    cDTI_cmaps = dict()
    cDTI_cmaps['HA']     = cmap_HA
    cDTI_cmaps['E2A']    = cmap_E2A
    cDTI_cmaps['absE2A'] = cmap_absE2A
    cDTI_cmaps['TA']     = cmap_TA
    cDTI_cmaps['MD']     = cmap_MD
    cDTI_cmaps['ADC']    = cmap_ADC
    cDTI_cmaps['FA']     = cmap_FA
    cDTI_cmaps['MO']     = cmap_MO
    return cDTI_cmaps
